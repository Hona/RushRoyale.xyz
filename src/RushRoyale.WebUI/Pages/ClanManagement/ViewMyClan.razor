@page "/clan-management/my-clans/{GuildId:long}/{RoleId:long}"
@using Size = MudBlazor.Size
@attribute [Authorize]

@inject ClanClient ClanClient
@inject NavigationManager NavigationManager

@if (_loading)
{
    <MudProgressLinear Indeterminate />
}
else if (_clan is null)
{
    <span>Clan is null...</span>
}
else
{
    <div class="d-flex align-end mb-4 gap-2">
        <MudTextField @bind-Value="@_clan.DisplayName" Style="font-size: var(--mud-typography-h4-size); color: var(--mud-palette-primary) !important;" Class="mud-primary-text" Variant="Variant.Text"/>
        <MudButton Style="height: fit-content" Color="Color.Secondary" OnClick="SaveClanAsync">Save</MudButton>
    </div>
    <MudTable Items="_clan.RoleUsers" Hover Dense Filter="x => FilterFunc(x, _memberSearchString)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Members: @_clan.RoleUsers.Count/50</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_memberSearchString" DebounceInterval="100" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>
                <MudTableSortLabel SortBy="new Func<GuildUser, object>(x => x.DisplayName)"
                                   InitialDirection="SortDirection.Ascending">
                    Discord User
                </MudTableSortLabel>
            </MudTh>
            <MudTh>
                IGN
            </MudTh>
            <MudTh Style="width: 1%">
                Tools
            </MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="User">
                <DiscordUser Value="context" Height="48"/>
            </MudTd>
            <MudTd>

            </MudTd>
            <MudTd>
                <ClanUserTools Clan="_clan" User="context"/>
            </MudTd>
        </RowTemplate>
    </MudTable>
    
    <MudDivider Class="my-6"/>

    <div class="d-flex align-end mb-4 gap-2">
        <MudTextField @bind-Value="@_clan.SandalsWarningMessage" Label="Sandals Warning Message" Placeholder="Using Default..." Class="mud-primary-text" Variant="Variant.Text"/>
        <MudButton Style="height: fit-content" Color="Color.Secondary" OnClick="SaveClanAsync">Save</MudButton>
    </div>
    
    <MudDivider Class="my-6"/>
    
    <MudButton Color="Color.Error" OnClick="DeleteClanAsync">
        Delete Clan
    </MudButton>
}

@code {
    private Clan? _clan;
    
    private bool _loading;
    
    private string _memberSearchString = string.Empty;

    [Parameter]
    public long GuildId { get; set; }

    [Parameter]
    public long RoleId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        
        _clan = await ClanClient.GetClanAsync(GuildId, RoleId);

        _loading = false;
    }

    private async Task SaveClanAsync()
    {
        _loading = true;

        await ClanClient.UpdateClanAsync(GuildId, RoleId, _clan);

        _clan = await ClanClient.GetClanAsync(GuildId, RoleId);
        
        _loading = false;
    }

    private async Task DeleteClanAsync()
    {
        _loading = true;

        await ClanClient.DeleteClanAsync(GuildId, RoleId);

        NavigationManager.NavigateTo("/clan-management/my-clans");
        
        _loading = false;
    }
    
    private bool FilterFunc(GuildUser element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        /*if (element.IGN.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;*/
        return false;
    }

}
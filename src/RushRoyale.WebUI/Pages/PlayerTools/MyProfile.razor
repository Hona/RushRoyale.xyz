@page "/player-tools/my-profile"
@attribute [Authorize]
@using Size = MudBlazor.Size

@inject DataService DataService
@inject ProfileClient ProfileClient

@if (_loading)
{
    <MudProgressLinear Indeterminate />
}
else
{
    <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="ma-2" Size="Size.Large" OnClick="HandleSaveAsync">Save</MudButton>

    @foreach (var playerUnit in _profile.Units)
    {
        <MudCard Class="d-flex align-center pa-4 my-2">
            <div class="px-4">
                <UnitCard Disabled="@(playerUnit.UnitLevel == 0)" Size="Shared.Size.Medium" Value="_units.First(x => x.Id == playerUnit.UnitId)" Level="playerUnit.UnitLevel"/>
            </div>
            <MudSlider @bind-Value="playerUnit.UnitLevel" Class="px-6" T="int" Min="0" Max="15" Size="Size.Large" TickMarks ValueLabel>
                @if (playerUnit.UnitLevel != 0)
                {
                    <span>
                        Level: @playerUnit.UnitLevel
                    </span>
                }
                else
                {
                    <span>Not Unlocked!</span>
                }
            </MudSlider>
        </MudCard>
    }
}


@code {
    private bool _loading;
    
    private IReadOnlyList<Unit>? _units;

    private PlayerProfile _profile = null!;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        
        _units = await DataService.GetUnitsAsync() ?? throw new InvalidOperationException();

        await LoadProfileAsync();

        _loading = false;
    }

    private async Task LoadProfileAsync()
    {
        _profile = await ProfileClient.GetProfileAsync();
        
        if (!_profile.Units.Any())
        {
            _profile.Units = _units.Select(x => new PlayerUnit()
            {
                UnitId = x.Id,
                UnitLevel = 0
            }).ToList();
        }
    }

    private async Task HandleSaveAsync()
    {
        _loading = true;
        
        await ProfileClient.CreateOrUpdateProfileAsync(_profile);

        await LoadProfileAsync();
        
        _loading = false;
    }

}
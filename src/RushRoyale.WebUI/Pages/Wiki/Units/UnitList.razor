@page "/wiki/units"
@using Size = RushRoyale.WebUI.Shared.Size
@using RushRoyale.WebUI.Models
@inject DataService DataService

@if (_units is null || _factions is null)
{
    <MudProgressLinear Indeterminate/>
}
else
{
    var selectedFaction = _factions.First(x => x.Value == _selectedFaction);
    <MudAlert Severity="Severity.Info" Class="my-6">
        @selectedFaction.Name
    </MudAlert>

    <div class="faction-filter">
        @foreach (var faction in _factions)
        {
            <FactionIcon Size="Size.Medium" Value="faction" IsSelected="faction.Value == _selectedFaction"
                         IsButton OnClick="clickedFaction => _selectedFaction = clickedFaction.Value"/>
        }
    </div>
    
    <MudChipSet Class="faction-filter" @bind-SelectedChips="_filteredRarities" MultiSelection Filter>
        @foreach (var rarity in _rarities)
        {
            <RarityChip Value="rarity"/>
        }
    </MudChipSet>

    
    <MudContainer MaxWidth="MaxWidth.Medium">
        <div class="unit-grid">
            @{
                var filteredUnits = _units;

                if (_selectedFaction is not null)
                {
                    filteredUnits = filteredUnits
                        .Where(x => x.FactionType == _selectedFaction)
                        .ToList().AsReadOnly();
                }

                if (_filteredRarities is not null && _filteredRarities.Any())
                {
                    filteredUnits = filteredUnits
                        .Where(x => _filteredRarities.Any(chip => chip.Value is Rarity rarity && rarity == x.Rarity))
                        .ToList().AsReadOnly();
                }
            }
            @foreach (var unit in filteredUnits)
            {
                <div class="unit-wrapper">
                    <UnitCard Value="unit" Size="Size.Large" IsButton/>
                </div>
            }
        </div>
    </MudContainer>
}


@code {

    private IReadOnlyList<Unit>? _units;
    private IReadOnlyList<Faction>? _factions;
    private IReadOnlyList<Rarity> _rarities = Enum.GetValues<Rarity>();

    private MudChip[]? _filteredRarities;

    private FactionType? _selectedFaction;

    protected override async Task OnInitializedAsync()
    {
        _units = await DataService.GetUnitsAsync();
        _factions = await DataService.GetFactionsAsync();
    }
}
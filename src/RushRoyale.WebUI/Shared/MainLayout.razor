@inherits LayoutComponentBase

@inject NavigationManager NavigationManager

@implements IDisposable

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">
            <div @onclick='() => NavigationManager.NavigateTo("/")'>RushRoyale.xyz</div>
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
            <ErrorBoundary @ref="_errorBoundary">
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent>
                    <MudContainer MaxWidth="MaxWidth.Medium">
                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                            An unexpected error has occurred. Please try again later, or navigate to the <MudLink Typo="Typo.body2" Href="/" Color="Color.Inherit">dashboard</MudLink>
                        </MudAlert>
                        <MudPaper Class="mt-4 pa-8">
                            <MudText Typo="Typo.overline" Style="line-height: initial">
                                @context.ToString()
                            </MudText>
                        </MudPaper>
                    </MudContainer>
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
</MudLayout>

<MudThemeProvider IsDarkMode/>
<MudDialogProvider/>
<MudSnackbarProvider/>

@code {
    bool _drawerOpen = true;

    private ErrorBoundary _errorBoundary = null!;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += RecoverFromError;
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void RecoverFromError(object? sender, LocationChangedEventArgs e)
    {
        _errorBoundary.Recover();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= RecoverFromError;
    }
}